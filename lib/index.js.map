{"version":3,"sources":["index.js"],"names":["Config","__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__rest","indexOf","getOwnPropertySymbols","propertyIsEnumerable","defineProperty","exports","Adapter","initConfig","config","mapStateToProps","_a","_b","namespace","state","loading","global","mapDispatchToProps","namespaces","dispatch","keys","forEach","Service","key","methodName","charAt","toUpperCase","substring","type","params","model","effects","reducers","receive","payload","response","_c","codeKey","codeSuccessKey","dataKey","messageKey","_d","put","success","other","_e","default"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\nvar __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __rest = (this && this.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar Config;\r\n/**\r\n * ServiceRegister\r\n * @class ServiceRegister\r\n * @classdesc 服务的注册\r\n * 1.自动生成数据流的mapDispatchToProps映射\r\n * 2.自动生成数据流的mapStateToProps映射\r\n * 3.自动生成数据流的Model\r\n */\r\nvar Adapter = {\r\n    /**\r\n     * initConfig - 服务注册初始化\r\n     * @param {Object} - config\r\n     * - namespace: service的实例\r\n     * property: model的namespace，也可以理解为模块名称\r\n     * value: value为Service的实例对象\r\n     */\r\n    initConfig: function (config) {\r\n        Config = config;\r\n    },\r\n    /**\r\n     * mapStateToProps - 自动生成mapStateToProps\r\n     * @param {String} - namespace\r\n     * @param {Object} - state 数据流的数据\r\n     * @return {Object} - mapStateToProps的映射\r\n     * 映射namespace到Props\r\n     * 映射loading到Props\r\n     */\r\n    mapStateToProps: function (_a) {\r\n        var _b;\r\n        var namespace = _a.namespace, state = _a.state;\r\n        var result = (_b = {},\r\n            _b[namespace] = state[namespace],\r\n            _b.loading = state.loading.global,\r\n            _b);\r\n        return result;\r\n    },\r\n    /**\r\n     * mapDispatchToProps - 自动生成mapDispatchToProps\r\n     * @param {Array<String>} - namespaces - 模块的集合\r\n     * @param {Function} - dispatch\r\n     * @return {Object} - mapDispatchToProps映射\r\n     */\r\n    mapDispatchToProps: function (_a) {\r\n        var namespaces = _a.namespaces, dispatch = _a.dispatch;\r\n        // service的实例\r\n        var mapDispatchToProps = {};\r\n        var keys = [];\r\n        if (!namespaces || !namespaces.length) {\r\n            // 如果不传递模块集合或者模块集合为空数组，则生成所有Service的方法隐射\r\n            keys = Object.keys(Config);\r\n        }\r\n        else {\r\n            keys = namespaces;\r\n        }\r\n        keys.forEach(function (namespace) {\r\n            var Service = Config[namespace];\r\n            Object.keys(Service).forEach(function (key) {\r\n                // methodName是namespace + 接口方法名首字母大写\r\n                // 例子 namespace是todolist Service中有fetchList接口\r\n                // 则方法名为todolistFetchList\r\n                var methodName = \"\" + namespace + key\r\n                    .charAt(0)\r\n                    .toUpperCase() + key.substring(1);\r\n                var type = namespace + \"/\" + key;\r\n                // params必须是对象且只有一个对象\r\n                mapDispatchToProps[methodName] = function (params) {\r\n                    return dispatch(Object.assign({ type: type }, params));\r\n                };\r\n            });\r\n        });\r\n        return mapDispatchToProps;\r\n    },\r\n    /**\r\n     * model - 生成Service对应的Model\r\n     * @param {String} - namespace\r\n     * @return {Object} - Model\r\n     * 此方默认处理Service中的所有接口，默认生成的Effect只调用接口，\r\n     * 把接口返回值注入到以方法名为Key，返回的dataKey为数据的数据流中，且在model的namespace键中创建\r\n     * 例如：\r\n     * 假定model的namsespace为todolist\r\n     * Service中有ferchList方法\r\n     * Model的处理为\r\n     * 1.调用fetchList\r\n     * 2.将返回值放入 {\r\n     *    todolist:{\r\n     *      fetchList: 数据\r\n     *    }\r\n     * }\r\n     */\r\n    model: function (namespace) {\r\n        // service的实例\r\n        var Service = Config[namespace];\r\n        // 模型\r\n        var model = {\r\n            // namespace\r\n            namespace: namespace,\r\n            // effects\r\n            effects: {},\r\n            // reducers\r\n            reducers: {\r\n                receive: function (state, _a) {\r\n                    var payload = _a.payload;\r\n                    return __assign(__assign({}, state), payload);\r\n                }\r\n            }\r\n        };\r\n        // 所有除了default\r\n        Object.keys(Service).forEach(function (key) {\r\n            if (key !== \"default\") {\r\n                // params是调用mapDispatchToProps的参数\r\n                // success是回调函数\r\n                model.effects[key] = function (_a, _b) {\r\n                    var response, _c, codeKey, codeSuccessKey, dataKey, messageKey;\r\n                    var _d;\r\n                    var call = _b.call, put = _b.put;\r\n                    var success = _a.success, other = __rest(_a, [\"success\"]);\r\n                    return __generator(this, function (_e) {\r\n                        switch (_e.label) {\r\n                            case 0: return [4 /*yield*/, call(Service[key], other)];\r\n                            case 1:\r\n                                response = _e.sent();\r\n                                _c = Service.default, codeKey = _c.codeKey, codeSuccessKey = _c.codeSuccessKey, dataKey = _c.dataKey, messageKey = _c.messageKey;\r\n                                if (!(response[codeKey] === codeSuccessKey)) return [3 /*break*/, 3];\r\n                                // 如果有success调用success传递data和message\r\n                                if (success) {\r\n                                    success(response[dataKey], response[messageKey]);\r\n                                }\r\n                                // 向数据流里放入Service的方法名为key,response[dataKey]为值的数据\r\n                                return [4 /*yield*/, put({\r\n                                        type: \"receive\",\r\n                                        payload: (_d = {}, _d[key] = response[dataKey], _d)\r\n                                    })];\r\n                            case 2:\r\n                                // 向数据流里放入Service的方法名为key,response[dataKey]为值的数据\r\n                                _e.sent();\r\n                                _e.label = 3;\r\n                            case 3: return [2 /*return*/];\r\n                        }\r\n                    });\r\n                };\r\n            }\r\n        });\r\n        return model;\r\n    }\r\n};\r\nexports.default = Adapter;\r\n"]}